Use a hex viewer such as xxd to view the bytes in an ELF binary in hexadecimal format. For example, you can use the command xxd
/bin/ls | head -n 30 to view the first 30 lines of bytes for the /bin/ ls program. Can you identify the bytes representing the ELF header? Try to find all of the ELF header fields in the xxd output and see whether the contents of those fields make sense to you.


Output of xxd /bin/ls | head -n 30 

00000000: 7f45 4c46 0201 0100 0000 0000 0000 0000  .ELF............
00000010: 0300 3e00 0100 0000 205b 0000 0000 0000  ..>..... [......
00000020: 4000 0000 0000 0000 b023 0200 0000 0000  @........#......
00000030: 0000 0000 4000 3800 0b00 4000 1b00 1a00  ....@.8...@.....
00000040: 0600 0000 0400 0000 4000 0000 0000 0000  ........@.......
00000050: 4000 0000 0000 0000 4000 0000 0000 0000  @.......@.......
00000060: 6802 0000 0000 0000 6802 0000 0000 0000  h.......h.......
00000070: 0800 0000 0000 0000 0300 0000 0400 0000  ................
00000080: a802 0000 0000 0000 a802 0000 0000 0000  ................
00000090: a802 0000 0000 0000 1c00 0000 0000 0000  ................
000000a0: 1c00 0000 0000 0000 0100 0000 0000 0000  ................
000000b0: 0100 0000 0400 0000 0000 0000 0000 0000  ................
000000c0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000d0: 1035 0000 0000 0000 1035 0000 0000 0000  .5.......5......
000000e0: 0010 0000 0000 0000 0100 0000 0500 0000  ................
000000f0: 0040 0000 0000 0000 0040 0000 0000 0000  .@.......@......
00000100: 0040 0000 0000 0000 d133 0100 0000 0000  .@.......3......
00000110: d133 0100 0000 0000 0010 0000 0000 0000  .3..............
00000120: 0100 0000 0400 0000 0080 0100 0000 0000  ................
00000130: 0080 0100 0000 0000 0080 0100 0000 0000  ................
00000140: c08c 0000 0000 0000 c08c 0000 0000 0000  ................
00000150: 0010 0000 0000 0000 0100 0000 0600 0000  ................
00000160: d00f 0200 0000 0000 d01f 0200 0000 0000  ................
00000170: d01f 0200 0000 0000 9812 0000 0000 0000  ................
00000180: 8825 0000 0000 0000 0010 0000 0000 0000  .%..............
00000190: 0200 0000 0600 0000 581a 0200 0000 0000  ........X.......
000001a0: 582a 0200 0000 0000 582a 0200 0000 0000  X*......X*......
000001b0: 0002 0000 0000 0000 0002 0000 0000 0000  ................
000001c0: 0800 0000 0000 0000 0400 0000 0400 0000  ................
000001d0: c402 0000 0000 0000 c402 0000 0000 0000  ................

Program header start from 0x40 ie 64.  I tried out the command readelf --wide --segments /bin/ls | head -n 30

Elf file type is DYN (Shared object file)
Entry point 0x5b20
There are 11 program headers, starting at offset 64

Program Headers:
  Type           Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align
  PHDR           0x000040 0x0000000000000040 0x0000000000000040 0x000268 0x000268 R   0x8
  INTERP         0x0002a8 0x00000000000002a8 0x00000000000002a8 0x00001c 0x00001c R   0x1
      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
  LOAD           0x000000 0x0000000000000000 0x0000000000000000 0x003510 0x003510 R   0x1000
  LOAD           0x004000 0x0000000000004000 0x0000000000004000 0x0133d1 0x0133d1 R E 0x1000
  LOAD           0x018000 0x0000000000018000 0x0000000000018000 0x008cc0 0x008cc0 R   0x1000
  LOAD           0x020fd0 0x0000000000021fd0 0x0000000000021fd0 0x001298 0x002588 RW  0x1000
  DYNAMIC        0x021a58 0x0000000000022a58 0x0000000000022a58 0x000200 0x000200 RW  0x8
  NOTE           0x0002c4 0x00000000000002c4 0x00000000000002c4 0x000044 0x000044 R   0x4
  GNU_EH_FRAME   0x01d324 0x000000000001d324 0x000000000001d324 0x000954 0x000954 R   0x4
  GNU_STACK      0x000000 0x0000000000000000 0x0000000000000000 0x000000 0x000000 RW  0x10
  GNU_RELRO      0x020fd0 0x0000000000021fd0 0x0000000000021fd0 0x001030 0x001030 R   0x1
  
  Which gave me the info of the file ls. So the next header starts at 0x2a8 and the load is at different address points including 0x0,0x18000,0x20fd0, dynamci is at 0xa58,not at 0x2c4 and EH_Frame at 0x1d324 and gnu stack at 0x0 and gnu_relro at 0xfd0 in total there are 11 program headers.
  
  2.
Use readelf to view the sections and segments in an ELF binary. How are the sections mapped into segments? Make an illustration of the binaryâ€™s on-disk representation versus its representation in memory.What are the major differences?

readelf --sections --wide /bin/ls 

There are 27 section headers, starting at offset 0x223b0:

Section Headers:
  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0
  [ 1] .interp           PROGBITS        00000000000002a8 0002a8 00001c 00   A  0   0  1
  [ 2] .note.gnu.build-id NOTE            00000000000002c4 0002c4 000024 00   A  0   0  4
  [ 3] .note.ABI-tag     NOTE            00000000000002e8 0002e8 000020 00   A  0   0  4
  [ 4] .gnu.hash         GNU_HASH        0000000000000308 000308 0000b0 00   A  5   0  8
  [ 5] .dynsym           DYNSYM          00000000000003b8 0003b8 000c00 18   A  6   1  8
  [ 6] .dynstr           STRTAB          0000000000000fb8 000fb8 0005bc 00   A  0   0  1
  [ 7] .gnu.version      VERSYM          0000000000001574 001574 000100 02   A  5   0  2
  [ 8] .gnu.version_r    VERNEED         0000000000001678 001678 000080 00   A  6   1  8
  [ 9] .rela.dyn         RELA            00000000000016f8 0016f8 001e00 18   A  5   0  8
  [10] .rela.plt         RELA            00000000000034f8 0034f8 000018 18  AI  5  22  8
  [11] .init             PROGBITS        0000000000004000 004000 00001b 00  AX  0   0  4
  [12] .plt              PROGBITS        0000000000004020 004020 000020 10  AX  0   0 16
  [13] .text             PROGBITS        0000000000004040 004040 013382 00  AX  0   0 16
  [14] .fini             PROGBITS        00000000000173c4 0173c4 00000d 00  AX  0   0  4
  [15] .rodata           PROGBITS        0000000000018000 018000 005321 00   A  0   0 32
  [16] .eh_frame_hdr     PROGBITS        000000000001d324 01d324 000954 00   A  0   0  4
  [17] .eh_frame         PROGBITS        000000000001dc78 01dc78 003048 00   A  0   0  8
  [18] .init_array       INIT_ARRAY      0000000000021fd0 020fd0 000008 08  WA  0   0  8
  [19] .fini_array       FINI_ARRAY      0000000000021fd8 020fd8 000008 08  WA  0   0  8
  [20] .data.rel.ro      PROGBITS        0000000000021fe0 020fe0 000a78 00  WA  0   0 32
  [21] .dynamic          DYNAMIC         0000000000022a58 021a58 000200 10  WA  6   0  8
  [22] .got              PROGBITS        0000000000022c58 021c58 000398 08  WA  0   0  8
  [23] .data             PROGBITS        0000000000023000 022000 000268 00  WA  0   0 32
  [24] .bss              NOBITS          0000000000023280 022268 0012d8 00  WA  0   0 32
  [25] .comment          PROGBITS        0000000000000000 022268 00004c 01  MS  0   0  1
  [26] .shstrtab         STRTAB          0000000000000000 0222b4 0000f7 00      0   0  1

readelf --wide --segments /bin/ls 

Elf file type is DYN (Shared object file)
Entry point 0x5b20
There are 11 program headers, starting at offset 64

Program Headers:
  Type           Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align
  PHDR           0x000040 0x0000000000000040 0x0000000000000040 0x000268 0x000268 R   0x8
  INTERP         0x0002a8 0x00000000000002a8 0x00000000000002a8 0x00001c 0x00001c R   0x1
      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
  LOAD           0x000000 0x0000000000000000 0x0000000000000000 0x003510 0x003510 R   0x1000
  LOAD           0x004000 0x0000000000004000 0x0000000000004000 0x0133d1 0x0133d1 R E 0x1000
  LOAD           0x018000 0x0000000000018000 0x0000000000018000 0x008cc0 0x008cc0 R   0x1000
  LOAD           0x020fd0 0x0000000000021fd0 0x0000000000021fd0 0x001298 0x002588 RW  0x1000
  DYNAMIC        0x021a58 0x0000000000022a58 0x0000000000022a58 0x000200 0x000200 RW  0x8
  NOTE           0x0002c4 0x00000000000002c4 0x00000000000002c4 0x000044 0x000044 R   0x4
  GNU_EH_FRAME   0x01d324 0x000000000001d324 0x000000000001d324 0x000954 0x000954 R   0x4
  GNU_STACK      0x000000 0x0000000000000000 0x0000000000000000 0x000000 0x000000 RW  0x10
  GNU_RELRO      0x020fd0 0x0000000000021fd0 0x0000000000021fd0 0x001030 0x001030 R   0x1

 Section to Segment mapping:
  Segment Sections...
   00     
   01     .interp 
   02     .interp .note.gnu.build-id .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt 
   03     .init .plt .text .fini 
   04     .rodata .eh_frame_hdr .eh_frame 
   05     .init_array .fini_array .data.rel.ro .dynamic .got .data .bss 
   06     .dynamic 
   07     .note.gnu.build-id .note.ABI-tag 
   08     .eh_frame_hdr 
   09     
   10     .init_array .fini_array .data.rel.ro .dynamic .got 


Here we can see how the sections are maped to segments, the major differences we can see are there are a total of 27 section headers packed into 11 segments. The flag field in sections are different but in the segment it is just one. 


4.
Use objdump to disassemble the PLT section of an ELF binary. Which GOT entries do the PLT stubs use? Now view the contents of those GOT entries (again with objdump ) and analyze their relation-ship with the PLT.

objdump -M intel --section .plt -d compilation

compilation:     file format elf64-x86-64


Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	ff 35 e2 2f 00 00    	push   QWORD PTR [rip+0x2fe2]        # 4008 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	ff 25 e4 2f 00 00    	jmp    QWORD PTR [rip+0x2fe4]        # 4010 <_GLOBAL_OFFSET_TABLE_+0x10>
    102c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000001030 <puts@plt>:
    1030:	ff 25 e2 2f 00 00    	jmp    QWORD PTR [rip+0x2fe2]        # 4018 <puts@GLIBC_2.2.5>
    1036:	68 00 00 00 00       	push   0x0
    103b:	e9 e0 ff ff ff       	jmp    1020 <.plt>
    
    
 objdump -M intel --section .got.plt -d compilation

compilation:     file format elf64-x86-64


Disassembly of section .got.plt:

0000000000004000 <_GLOBAL_OFFSET_TABLE_>:
    4000:	f8 3d 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .=..............
	...
    4018:	36 10 00 00 00 00 00 00                             6.......

The .plt and .got.plt shares the adress between 0x1020 to 0x1026


